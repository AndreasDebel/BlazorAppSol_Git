@page "/todo"
@inject HttpClient http
@using BlazorApp1.Model

<h1>ToDoList2</h1>
<h2>Der mangler @items.Count(item => !item.IsDone)</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Opgave</th>
            <th>Udført?</th>
            <th>Slet</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ToDoItem item in items)
        {
            <tr>
                <td><b>@item.Title</b></td>
                <td><InputCheckbox @bind-Value="item.IsDone" @oninput="() => OnClickDone(item)"></InputCheckbox></td>
                <td><button class="btn btn-danger" style="width: @deleteBTNsize; height: @deleteBTNsize; border-radius: @deleteBTNsize;" @onclick="() => DeleteItemFromList(item)">X</button></td>
            </tr>
        }
    </tbody>
</table>


@* <ul>
    @foreach (ToDoItem item in items)
    {
        <li>
            <InputCheckbox @bind-Value="item.IsDone" @onclick="() => OnClickDone(item)"></InputCheckbox>
            <b>@item.Title</b>
        </li>
    }
</ul> *@
<InputText @bind-Value="newToDo" placeHolder="Noget der skal gøres"></InputText>
<button class="btn btn-primary" @onclick="AddToDo">Add</button>

@code {
    string deleteBTNsize = "40px";

    string? newToDo;
    List<ToDoItem> items = new();

    private string serverUrl = "https://localhost:7018";


    protected override async Task OnInitializedAsync()
    {
        items = await http.GetFromJsonAsync<List<ToDoItem>>($"{serverUrl}/api/todo/getall");
    }

    async Task AddToDo()
    {
        var newToDoItem = new ToDoItem { Title = newToDo, IsDone = false };

        await http.PostAsJsonAsync($"{serverUrl}/api/todo/add", newToDoItem);

        items = await http.GetFromJsonAsync<List<ToDoItem>>($"{serverUrl}/api/todo/getall");

    }

    async Task DeleteItemFromList(ToDoItem item)
    {
        await http.DeleteAsync($"{serverUrl}/api/todo/delete/{item.Id}");

        items = await http.GetFromJsonAsync<List<ToDoItem>>($"{serverUrl}/api/todo/getall");
    }

    private async Task OnClickDone(ToDoItem item)
    {
        item.IsDone = !item.IsDone;

        await http.PutAsJsonAsync($"{serverUrl}/api/todo/update", item);

    }

}