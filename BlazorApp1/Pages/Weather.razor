@page "/weather"
@using Core3
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<button class="btn-secondary" @onclick="changeScale">@(tempInC ? "To Fahrenheit" : "To Celcius")</button>

<button class="btn-secondary" @onclick="() => forecastAmount(5)">+5</button>
<button class="btn-secondary" @onclick="() => forecastAmount(-5)">-5</button>
@* comment changed from laptop*@
<br />
<br />
<br />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>@(tempInC ? "Temp. (C)" : "Temp. (F)")</th>
                <th>Summary</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < forecasts.Length; i++)
            {
                <tr style="@(i % 2 == 0 ? "background-color: white;" : "")">
                    <td>@DateTime.Now.AddDays(i).ToString("yyyy-MM-dd")</td>
                    <td>@(tempInC ? forecasts[i].TemperatureC : forecasts[i].TemperatureF)</td>
                    <td style="color: @getTempColor(forecasts[i]?.Summary)">@forecasts[i].Summary</td>
                    <td>@forecasts[i].City</td>
                </tr>
            }
        </tbody>
    </table>
}




<DiceRoll noOfDice="5" />

@code {
    private WeatherForecast[]? forecasts;

    int numOfForecasts = 3;

    // protected override async Task OnInitializedAsync()
    // {
    //     forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"https:localhost:7018/getweather?count={numOfForecasts}");
    // }

    protected override async Task OnInitializedAsync()
    {
        await LoadForecasts();
    }

    private async Task LoadForecasts()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"https://localhost:7018/getweather?count={numOfForecasts}");
    }

    bool tempInC = true;

    private void changeScale()
    {
        tempInC = !tempInC;
    }

    private string getTempColor(string s)
    {
        switch (s)
        {
            case "Freezing":
            case "Bracing":
            case "Chilly":
                return "blue";

            case "Hot":
            case "Sweltering":
            case "Scorching":
                return "red";

            default:
                return "black";
        }
    }


    private async Task forecastAmount(int i)
    {
        numOfForecasts += i;
        if (numOfForecasts < 0) numOfForecasts = 0;
        Console.WriteLine($"numOfForecasts increased is {numOfForecasts}");
        await LoadForecasts();
    }

}
